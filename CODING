def is_valid_move(maze, visited, row, col):
    """Check if a move to a cell is valid."""
    return (0 <= row < len(maze)) and (0 <= col < len(maze[0])) and \
           (maze[row][col] == 0) and not visited[row][col]

def dfs(maze, start, end, path, visited):
    """Recursive function to perform DFS and find the path."""
    row, col = start
    if start == end:
        path.append(end)
        return True

    if not is_valid_move(maze, visited, row, col):
        return False

    visited[row][col] = True
    path.append(start)

    # Define possible moves: down, right, up, left
    moves = [(1, 0), (0, 1), (-1, 0), (0, -1)]

    for move in moves:
        next_row, next_col = row + move[0], col + move[1]
        if dfs(maze, (next_row, next_col), end, path, visited):
            return True

    path.pop()
    return False

def solve_maze(maze, start, end):
    """Solve the maze from start to end using DFS."""
    visited = [[False for _ in range(len(maze[0]))] for _ in range(len(maze))]
    path = []

    if dfs(maze, start, end, path, visited):
        return path
    else:
        return None

# Example usage
maze = [
    [0, 1, 0, 0, 0],
    [0, 1, 0, 1, 0],
    [0, 0, 0, 1, 0],
    [0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0]
]

start = (0, 0)  # Starting position
end = (4, 4)    # Ending position

path = solve_maze(maze, start, end)

if path:
    print("Path found:", path)
else:
    print("No path found")
